export function allowCors(handler) {
  return async (req, res) => {
    // âœ… Garante que as origens permitidas vÃªm do `.env`
    const allowedOrigins = process.env.CORS_ALLOWED_ORIGINS_REMOTE
      ? process.env.CORS_ALLOWED_ORIGINS_REMOTE.split(",")
      : [];

    const origin = req.headers.origin || "";
    const userAgent = req.headers["user-agent"] || "";

    // âœ… Verifica se o Postman estÃ¡ permitido via .env
    const isPostmanAllowed = process.env.POSTMAN_ALLOWED === "true";
    const isPostmanRequest = userAgent.includes("Postman");

    // âœ… Bloqueia a origem se nÃ£o estiver na lista permitida e o Postman nÃ£o estiver autorizado
    if (!allowedOrigins.includes(origin) && !(isPostmanAllowed && isPostmanRequest)) {
      console.warn(`ðŸš¨ Origem bloqueada: ${origin} | User-Agent: ${userAgent}`);
      return res.status(403).json({ error: "Acesso negado: Origem ou ferramenta nÃ£o autorizada" });
    }

    // âœ… Definir corretamente os headers CORS
    res.setHeader("Access-Control-Allow-Origin", origin); // ðŸ”¹ Permite apenas origens definidas no `.env`
    res.setHeader("Access-Control-Allow-Credentials", "true"); // ðŸ”¹ Permite cookies e sessÃµes autenticadas
    res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS, POST, PUT, DELETE");
    res.setHeader(
      "Access-Control-Allow-Headers",
      "X-Requested-With, Content-Type, Authorization, Cookie, Set-Cookie" // ðŸ”¹ Garante que "Set-Cookie" pode ser lido
    );

    // âœ… Responde imediatamente a requisiÃ§Ãµes OPTIONS (Preflight)
    if (req.method === "OPTIONS") {
      console.log(`ðŸŸ¢ OPTIONS permitido para: ${origin}`);
      return res.status(204).end();
    }

    return handler(req, res);
  };
}